BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 5), ('Grilled Salmon', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 5), ('Grilled Salmon', 3), ('Spaghetti Carbonara', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 3), ('Grilled Salmon', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 1), ('Grilled Salmon', 4), ('Chocolate Lava Cake', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5), ('Grilled Salmon', 2), ('Chocolate Lava Cake', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 4), ('Spaghetti Carbonara', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5), ('Grilled Salmon', 3), ('Chocolate Lava Cake', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 3), ('Chocolate Lava Cake', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 2), ('Chocolate Lava Cake', 4), ('Cheeseburger Deluxe', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 1), ('Spaghetti Carbonara', 3), ('Grilled Salmon', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5), ('Chocolate Lava Cake', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 3), ('Grilled Salmon', 2), ('Spaghetti Carbonara', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 3), ('Grilled Salmon', 4), ('Cheeseburger Deluxe', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 2), ('Chocolate Lava Cake', 3), ('Cheeseburger Deluxe', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 5), ('Cheeseburger Deluxe', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 1), ('Grilled Salmon', 3), ('Spaghetti Carbonara', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 3), ('Grilled Salmon', 2), ('Cheeseburger Deluxe', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 2), ('Spaghetti Carbonara', 5), ('Cheeseburger Deluxe', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 4), ('Spaghetti Carbonara', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 1), ('Spaghetti Carbonara', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 1), ('Cheeseburger Deluxe', 3), ('Spaghetti Carbonara', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 3), ('Chocolate Lava Cake', 3), ('Grilled Salmon', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 2), ('Cheeseburger Deluxe', 4), ('Grilled Salmon', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 3), ('Chocolate Lava Cake', 4), ('Cheeseburger Deluxe', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 3), ('Chocolate Lava Cake', 3), ('Cheeseburger Deluxe', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 4), ('Cheeseburger Deluxe', 5), ('Chocolate Lava Cake', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 2), ('Spaghetti Carbonara', 4), ('Grilled Salmon', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 4), ('Grilled Salmon', 1), ('Cheeseburger Deluxe', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 3), ('Grilled Salmon', 3), ('Spaghetti Carbonara', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 1), ('Grilled Salmon', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 4), ('Cheeseburger Deluxe', 5), ('Chocolate Lava Cake', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 5), ('Grilled Salmon', 2), ('Cheeseburger Deluxe', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5), ('Grilled Salmon', 4), ('Chocolate Lava Cake', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 2), ('Spaghetti Carbonara', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 1), ('Spaghetti Carbonara', 4), ('Cheeseburger Deluxe', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 2), ('Cheeseburger Deluxe', 3), ('Chocolate Lava Cake', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 1), ('Chocolate Lava Cake', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5), ('Grilled Salmon', 5), ('Spaghetti Carbonara', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 4), ('Spaghetti Carbonara', 2), ('Cheeseburger Deluxe', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 2), ('Chocolate Lava Cake', 5), ('Grilled Salmon', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 5), ('Chocolate Lava Cake', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 3), ('Cheeseburger Deluxe', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5), ('Spaghetti Carbonara', 3), ('Grilled Salmon', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 5), ('Cheeseburger Deluxe', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5), ('Grilled Salmon', 2), ('Spaghetti Carbonara', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5), ('Chocolate Lava Cake', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 3), ('Chocolate Lava Cake', 1), ('Cheeseburger Deluxe', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 4), ('Grilled Salmon', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 1), ('Grilled Salmon', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Chocolate Lava Cake'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 3), ('Chocolate Lava Cake', 2), ('Grilled Salmon', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 2), ('Cheeseburger Deluxe', 1), ('Grilled Salmon', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 3), ('Cheeseburger Deluxe', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 1), ('Chocolate Lava Cake', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 3), ('Grilled Salmon', 1), ('Cheeseburger Deluxe', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 4), ('Cheeseburger Deluxe', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 2), ('Chocolate Lava Cake', 5), ('Spaghetti Carbonara', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 5), ('Chocolate Lava Cake', 1), ('Spaghetti Carbonara', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 3), ('Chocolate Lava Cake', 5), ('Spaghetti Carbonara', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 4), ('Chocolate Lava Cake', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 4), ('Spaghetti Carbonara', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 1), ('Grilled Salmon', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 2), ('Spaghetti Carbonara', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Spaghetti Carbonara'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 3), ('Spaghetti Carbonara', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 4), ('Grilled Salmon', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 2), ('Cheeseburger Deluxe', 5), ('Grilled Salmon', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

SELECT * FROM customers WHERE phone = $1 FOR UPDATE
BEGIN
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Grilled Salmon'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 1), ('Grilled Salmon', 1), ('Cheeseburger Deluxe', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 5)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 5), ('Spaghetti Carbonara', 4), ('Cheeseburger Deluxe', 3)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 1), ('Grilled Salmon', 1), ('Chocolate Lava Cake', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        , 
        'Chocolate Lava Cake'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 2), ('Chocolate Lava Cake', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Cheeseburger Deluxe', 4)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

SELECT * FROM cards WHERE id = $1 FOR UPDATE
BEGIN
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Grilled Salmon', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Chocolate Lava Cake'
        , 
        'Cheeseburger Deluxe'
        , 
        'Grilled Salmon'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Chocolate Lava Cake', 1), ('Cheeseburger Deluxe', 2), ('Grilled Salmon', 2)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
INSERT INTO bill (bill_id) VALUES ((SELECT COALESCE(MAX(bill_id), 0) + 1 FROM bill)) RETURNING bill_id;

WITH valid_dishes AS (
  SELECT name, price, status
  FROM menu
  WHERE name IN (
        'Spaghetti Carbonara'
        , 
        'Cheeseburger Deluxe'
        )
),
checked_dishes AS (
  SELECT name, price
  FROM valid_dishes
  WHERE status = 'Available'
)
INSERT INTO orders (bill_id, name, price, quantity)
SELECT $1, checked_dishes.name, checked_dishes.price, orders_data.quantity
FROM checked_dishes
JOIN (VALUES ('Spaghetti Carbonara', 1), ('Cheeseburger Deluxe', 1)) AS orders_data(name, quantity)
ON checked_dishes.name = orders_data.name;
    

UPDATE bill
SET total = (
    SELECT COALESCE(SUM(price * quantity), 0)
    FROM orders
    WHERE bill_id = $1
),
tax = total * 0.0625
WHERE bill_id = $1;
    
COMMIT

BEGIN
SELECT * FROM customers WHERE phone = $1 FOR UPDATE
INSERT INTO customers (name, phone) VALUES ($1, $2)
SELECT * FROM customers WHERE phone = $1
COMMIT

BEGIN
SELECT * FROM cards WHERE id = $1 FOR UPDATE
INSERT INTO cards (id, name, ex_date, balance) VALUES ($1, $2, $3, $4)
COMMIT

BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

WITH bill_data AS (
  SELECT 
    total, tax, paid
  FROM bill
  WHERE bill_id = $1
  FOR UPDATE
),
updated_bill AS (
  UPDATE bill
  SET 
    cust_phone = $2,
    tip = $3,
    card_id = $4,
    paid = TRUE,
    location_name = $5,
    tax=total*0.065
  WHERE bill_id = $1
  RETURNING (total + $3 + total*0.065) AS total_amount
),

increment_points AS (
  UPDATE customers
  SET membership_point = membership_point + 1
  WHERE phone = $2
),
current_balance AS (
  SELECT 
    COALESCE(
      (SELECT business_balance FROM transaction ORDER BY tran_id DESC LIMIT 1), 
      5000.0
    ) AS current_balance
),
new_transaction AS (
  INSERT INTO transaction (total, from_bankacct, business_balance)
  SELECT 
    ub.total_amount, 
    $4, 
    cb.current_balance + ub.total_amount
  FROM updated_bill ub, current_balance cb
  RETURNING business_balance
)
SELECT business_balance FROM new_transaction;
    
COMMIT

